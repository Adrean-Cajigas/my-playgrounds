What is Node.js? 

Node.js is an open source runtime environment that is used for running web applications outside the client’s browser.

-------------------------------------------------------------------------------------------------------------------------------------------------

What is Node.js used for?

Node.js is used for server-side programming. It is primarily deployed for non-blocking event-driven servers, 
such as traditional websites and back-end API services. Every browser has its own version of a JS engine, 
and node.js is built on Google Chrome’s V8 JavaScript engine.

-------------------------------------------------------------------------------------------------------------------------------------------------

Why do we use Node.js?

It uses the V8 engine to compile JavaScript and runs at lightning-fast speeds. Node.js applications are very scalable and maintainable. 
Cross-platform support allows the creation of desktop apps, software as a service, and even mobile applications. Node.js is perfect for 
data-intensive and real-time applications since it uses an event-driven, non-blocking I/O model, making it lightweight and efficient. 
With such a huge community, a vast collection of Node.js packages is available to simplify and boost development.

-------------------------------------------------------------------------------------------------------------------------------------------------

Node.js vs Browser

Both the browser and Node.js use JavaScript as their programming language. Building apps that run in the browser is a different 
thing than building a Node.js application. Node.js apps bring with them a huge advantage: the comfort of programming everything
 - the frontend and the backend - in a single language. 

In the browser, you are interacting with the DOM, or other Web Platform APIs like Cookies. Those do not exist in Node.js. You don't 
have the document, window and all the other objects that are provided by the browser. In the browser, we don't have all the nice APIs 
that Node.js provides through its modules, like the filesystem access functionality.

Another big difference is that in Node.js you control the environment. You know which version of Node.js you will run the application on. 
Compared to the browser environment, where you don't get the luxury to choose what browser your visitors will use, this is very convenient.

-------------------------------------------------------------------------------------------------------------------------------------------------

Node.js Modules

We split our code into different files to organize and reuse code whenever possible. A module system allows us to split and include code and import 
code written by other developers whenever required. In simple terms, a module is nothing but a JavaScript file. Node.js has many built-in modules
that comes with Node.js installation such as HTTP, fs, path, and more. CommonJS and ES (EcmaScript) are the module systems used in Node.

Each module is wrapped with an IIFE that provides private scoping of code. This allows you to repeat variable/function names with any conflicts. 
Before a module is executed, Node.js will wrap it with a function that has 5 parameters :

(function(exports, require, modules, __filename, __dirname) {})



